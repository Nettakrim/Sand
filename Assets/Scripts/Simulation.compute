#pragma kernel CSInit
#pragma kernel CS3x3Start
#pragma kernel CSStep

int Random;

RWTexture2D<float4> Result;
RWTexture2D<float4> Input;
int2 Size;
int2 PosOffset;

RWStructuredBuffer<int> GateBuffer;
RWStructuredBuffer<int> ShippingBuffer;

//not sure why:
//https://discussions.unity.com/t/how-do-int-textures-work-in-computeshaders/246832/2
//doesnt work, but casting is fine

float4 encode(uint4 value) {
    return float4(float(value.r)/255.0, float(value.g)/255.0, float(value.b)/255.0, float(value.a)/255.0);
}

//https://www.shadertoy.com/view/MdcfDj
uint hash( uint2 q )
{
    q *= uint2(1597334677, 3812015801); 
    uint n = (q.x ^ q.y) * 1597334677;
    return asuint(float(n) * (1.0/float(0xffffffff)));
}

uint4 decode(float4 value) {
    return uint4(uint(value.r*255.0), uint(value.g*255.0), uint(value.b*255.0), uint(value.a*255.0));
}

uint4 getPixel(uint2 pos) {
    if (pos.x < asuint(Size.x) && pos.y < asuint(Size.x)) {
        return decode(Input[pos]);
    }
    return uint4(0,0,1,0);
}

void setPixel(uint2 pos, uint4 data) {
    if (pos.x < asuint(Size.x) && pos.y < asuint(Size.y)) {
        Result[pos] = encode(data);
    }
}

void copyPixel(uint2 pos) {
    if (pos.x < asuint(Size.x) && pos.y < asuint(Size.y)) {
        Result[pos] = Input[pos];
    }
}

bool tileFree(uint4 data, int direction) {
    //4-7 crossroads, which are blocked based on direction

    if (data.b >= 4 && data.b <= 7) {
        return (direction > 1 ? (data.a == 0) : (data.g == 0));
    }

    //non-0 sand
    //0001 wall
    //1000 miner
    return !(data.g > 0 || data.b == 1 || data.b == 8);
}

uint4 updateTile(uint4 data, uint2 pos) {
    //miner: increment 3rd-5th bits, if at max count and theres no sand on the miner, create sand and reset count
    if (data.b == 8) {
        if (data.a < 28) data.a += 4;
        else if (data.g == 0) data.a -= 28;

        if (data.g == 0 && data.a >= 24) {
            data.g = (data.r&31) | ((hash(pos^uint2(asuint(Random), asuint(Random)))&7) << 5);
        }
    }

    //painter: increment 3rd-5th bits, if at max, change sand color and reset count - only do this if sand is on the painter
    if (data.b == 9 && data.g > 0) {
        if (data.a < 28) data.a += 4;
        else {
            data.a -= 28;
            data.g = (data.g & ~28) | (data.r & 28);
        }
    }

    //gate: if any of the gate type has no sand, that bit is set true
    if (data.b == 15 && data.g == 0) {
        InterlockedOr(GateBuffer[data.a >> 7], 1 << ((data.a&127) >> 2));
    }

    if (data.b == 3 && data.g > 0) {
        //flip 3rd bit while sand is on it, this swaps the target direction
        data.a ^= 4;
    }

    return data;
}

int getTileMovement(uint4 data) {
    //-1 none
    //0  00 right
    //1  01 left
    //2  10 up
    //3  11 down

    //conveyor: movement direction directly corresponds to component data
    //this is also the case for painter and all filters, since they keep sand moving in the same direction, but they need ---XX to be masked
    if (data.b == 2 || data.b == 12 || data.b == 13 || data.b == 14) return data.a&3;

    //miner: movement is stored the same way, but it should only happen when count is at max
    if (data.b == 8 && data.a > 27) return data.a&3;

    //splitter: movment is based on direction entered
    if (data.b == 3) {
        //flip axis (2nd bit) of sand entry
        //conditionally flip direction (1st bit) if 3rd bit is set xored with if direction is vertical

        //return (data.a ^ (2 + ((data.a >> 2) ^ ((data.a >> 1)&1))))&3;

        // |4|2|1| XX | ^2 | >1^>>2 | 2|prev | 21^prev = XX
        // |-|-|-|----|----|--------|--------|
        // |0|0|0| 10 | 10 |   00   |   10   |
        // |0|0|1| 11 | 11 |   00   |   10   |
        // |0|1|0| 01 | 00 |   01   |   11   |
        // |0|1|1| 00 | 01 |   01   |   11   |
        // |1|0|0| 11 | 10 |   11   |   11   |
        // |1|0|1| 10 | 11 |   11   |   11   |
        // |1|1|0| 00 | 00 |   10   |   10   |
        // |1|1|1| 01 | 01 |   10   |   10   |

        // 1s place is "odd total of bits", 2s place is "not refrence 2"

        return (data.a&3) ^ (2 | ((data.a >> 1) ^ (data.a >> 2)));
    }

    //painter only allows sand through if its timer is 0
    if (data.b == 9) {
        return data.a < 4 ? (data.a & 3) : -1;
    }

    //gate: only let through when all of gate id is ready, then if successful dissallow the next tick of gate passage
    if (data.b == 15) {
        int i = data.a >> 7;
        int s = 1 << ((data.a&127) >> 2);
        if ((GateBuffer[i|2] & s) == 0) {
            InterlockedOr(GateBuffer[i], s);
            return data.a&3;
        }
    }

    return -1;
}

uint4 sandEnteredTile(uint sand, int direction, uint4 data) {
    if (data.b >= 4 && data.b <= 7) {
        if (direction < 2) {
            //if x axis, replace -X bit with positiveness
            data.b = (data.b & ~1) + (direction&1);
            data.g = sand;
        } else {
            //if y axis, replace X- bit with positiveness
            data.b = (data.b & ~2) + ((direction&1) << 1);
            data.a = sand;
        }
        return data;
    }

    data.g = sand;

    //splitter: set first 2 bits to movement direction
    //this is also the case for all filters and the gate
    //and for painters
    if (data.b == 3 || data.b >= 12 || data.b == 9) data.a = (data.a & ~3) | direction;

    //bin: instantly destroy sand, this is done when sand enters the tile, that way sand from different direction can enter the same bin without needing the bin to be ticked
    if (data.b == 10) {
        data.g = 0;
    }
    //shipping point: instantly destroy sand, add to respective shipping int
    if (data.b == 11) {
        InterlockedAdd(ShippingBuffer[(data.g >> 2) | (((data.g-1)&3) << 3)], 1);
        data.g = 0;
    }

    //weight filter
    if (data.b == 12) {
        if ((data.a >> 2) != (data.g & 3)) {
            data.g = 0;
        }
    }
    //color filter
    if (data.b == 13) {
        if ((data.a >> 2) != ((data.g >> 2) & 7)) {
            data.g = 0;
        }
    }
    //smart filter
    if (data.b == 14) {
        //todo: make it work
        data.g = 0;
    }

    return data;
}

[numthreads(1,1,1)]
void CSStep (uint3 id : SV_DispatchThreadID)
{
    uint2 pos = uint2(id.x*3 + PosOffset.x - 1, id.y*3 + PosOffset.y - 1);

    uint2 rightPos = pos+uint2(1, 0);
    uint2 leftPos  = pos-uint2(1, 0);
    uint2 upPos    = pos+uint2(0, 1);
    uint2 downPos  = pos-uint2(0, 1);

    uint4 current = getPixel(pos);

    uint4 right = getPixel(rightPos);
    uint4 left  = getPixel(leftPos);
    uint4 up    = getPixel(upPos);
    uint4 down  = getPixel(downPos);

    //crossroads are calculated seperately
    if (current.b < 4 || current.b > 7) {
        current = updateTile(current, pos);

        if (current.g > 0) {
            int direction = getTileMovement(current);

            if (direction >= 0) {
                uint4 tileInDirection;

                if (direction == 0)      tileInDirection = right;
                else if (direction == 1) tileInDirection = left;
                else if (direction == 2) tileInDirection = up;
                else if (direction == 3) tileInDirection = down;
                else tileInDirection = uint4(0,0,1,0);

                if (tileFree(tileInDirection, direction)) {
                    tileInDirection = sandEnteredTile(current.g, direction, tileInDirection);
                    current.g = 0;
                }

                if (direction == 0)      right = tileInDirection;
                else if (direction == 1) left  = tileInDirection;
                else if (direction == 2) up    = tileInDirection;
                else if (direction == 3) down  = tileInDirection;
            }
        }
    } else {
        //crossroad simulation

        int directions = current.b&3;
        // 00 - ur
        // 01 - ul
        // 10 - dr
        // 11 - dl

        if (current.g > 0) {
            //x axis
            bool positive = (directions&1) == 0;
            uint4 tileInDirection = positive ? right : left;
            if (tileFree(tileInDirection, positive ? 0 : 1)) {
                tileInDirection = sandEnteredTile(current.g, positive ? 0 : 1, tileInDirection);
                current.g = 0;
            }
            if (positive) {
                right = tileInDirection;
            } else {
                left = tileInDirection;
            }
        }

        if (current.a > 0) {
            //y axis
            bool positive = directions < 2;
            uint4 tileInDirection = positive ? up : down;
            if (tileFree(tileInDirection, positive ? 2 : 3)) {
                tileInDirection = sandEnteredTile(current.a, positive ? 2 : 3, tileInDirection);
                current.a = 0;
            }
            if (positive) {
                up = tileInDirection;
            } else {
                down = tileInDirection;
            }
        }
    }

    copyPixel(uint2(pos.x+uint(1), pos.y+uint(1)));
    copyPixel(uint2(pos.x+uint(1), pos.y-uint(1)));
    copyPixel(uint2(pos.x-uint(1), pos.y+uint(1)));
    copyPixel(uint2(pos.x-uint(1), pos.y-uint(1)));

    setPixel(rightPos, right);
    setPixel(leftPos, left);
    setPixel(upPos, up);
    setPixel(downPos, down);


    setPixel(pos, current);
}

[numthreads(1,1,1)]
void CS3x3Start (uint3 id : SV_DispatchThreadID)
{
    GateBuffer[2] = GateBuffer[0];
    GateBuffer[3] = GateBuffer[1];
    GateBuffer[0] = 0;
    GateBuffer[1] = 0;
    for (int x = 0; x < 24; x++) {
        ShippingBuffer[x] = 0;
    }
}

[numthreads(8,8,1)]
void CSInit (uint3 id : SV_DispatchThreadID)
{
    uint ground = 0;
    uint sand = 0;
    uint component = 2;
    uint componentData = 0;

    int x = int(id.x)-128;
    int y = int(id.y)-128;

//    if (x >= 0) {
//        if (y >= 0) {
//            componentData = (x >= y) ? 3 : 0;
//        } else {
//            componentData = (x >= -y) ? 3 : 1;
//        }
//    } else {
//        if (y >= 0) {
//            componentData += (-x > y+1) ? 2 : 0;
//        } else {
//            componentData += (-x > -y) ? 1 : 2;
//        }
//    }
//
//    if (y == 0 && x > 10 && id.x%5 == 0) {
//        component = 8;
//        componentData = 3;
//        ground = 1 + (((id.x/5)%8) << 2);
//    }

//
//    if (y == 0 && x < -10 && id.x%5 == 2) {
//        component = 3;
//        componentData = 0;
//    }
//
//    if (x == 0 && y > 10 && (id.y%5 == 4 || id.y%5 == 1)) {
//        component = 9;
//        componentData = 0;
//        ground = ((uint(x^y)*67)%8)<<2;
//    }
//    if (x == 1 && y > 10 && (id.y%5 == 4 || id.y%5 == 1)) {
//        component = 3;
//        componentData = 0;
//    }
//    if (x == 1 && y > 10 && id.y%5 == 0) {
//        component = 1;
//        componentData = 0;
//    }

    if (-x == y && x < 0) {
        component = 8;
        componentData = 0;
        ground = 1 + (((id.x/5)%8) << 2);
    } else if (-x == y && x > 0) {
        component = 8;
        componentData = 2;
        ground = 1 + (((id.x/5)%8) << 2);
    } else {
        component = 4;
        componentData = 0;
    }

    if (x > 100 || y > 100) {
        component = 3;
    }

//    if (x == 0 && y == 0) {
//        sand = 255;
//    }
//    component = 3;
//    componentData = 0;

//    if (y == 0) {
//        component = 8;
//        componentData = 3;
//        ground = 31;
//    } else if (y == -10 && x >= 0) {
//        if (x < 4) {
//            component = 12;
//            componentData = x*4;
//        } else {
//            component = 13;
//            componentData = (x-4)*4;
//        }
//    } else {
//        component = 2;
//        componentData = 3;
//    }

//    if (y == 0 && x < -10 && id.x%5 == 0) {
//        component = 11;
//        componentData = 0;
//    }

    Result[id.xy] = encode(uint4(ground, sand, component, componentData));
}